plugins {
    id 'com.android.library'
}
apply from: "$rootDir/asessts/script/android.gradle"
android {
    namespace 'bydauto'

    defaultConfig {
        versionCode 1
        versionName "1.0"
    }
}

task("refactorInterface") {
    doLast {
        File dir = new File(projectDir, "src/main/java/android/hardware")
        refactor(dir)
    }
}

public static void refactor(File file) {
    if (file.isDirectory()) {
        file.listFiles().each { refactor(it) }
        return
    }
    if (!file.isFile()) {
        return
    }
    StringBuilder sb = new StringBuilder("//refactor\n")
    boolean hasClass = false
    for (str in file.readLines()) {
        str = str.trim()
        if ("//refactor" == str) {
            return
        }
        if (str.startsWith("public interface")) {
            return
        }
        if(str.startsWith("private")){
            continue
        }
        if (str.contains(" class ")) {
            if(hasClass) continue
            hasClass = true
            sb.append(str).append("\n")
            continue
        }
        if (str.startsWith("public") && str.endsWith("{")) {
            def i = str.indexOf("(")
            if(i == -1){
                println(str)
                throw GradleException(str)
            }
            if (str.substring(0,i).split(" ").length < 3) {
                continue
            }
            sb.append(str)
            if (str.startsWith("public int ") || str.startsWith("public double ") || str.startsWith("public float ")) {
                sb.append(" return 0; }\n")
            } else if (str.startsWith("public boolean ")) {
                sb.append(" return false; }\n")
            } else if (str.startsWith("public void ")) {
                sb.append(" }\n")
            } else {
                sb.append(" return null; }\n")
            }
            continue
        }

        if (str.startsWith("package") || str.startsWith("import") || str.startsWith("public")) {
            sb.append(str).append("\n")
        }
    }
    sb.append(" }\n")
    file.write(sb.toString())
    println("refactor -> $file.absolutePath")

}